{"version":3,"sources":["../../src/koa/09.js"],"names":["Koa","require","app","one","ctx","next","console","log","two","three","use","listen"],"mappings":";;AAAA;;;;;;;;;AASA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,MAAM,IAAIF,GAAJ,EAAZ;;AAEA,IAAMG,MAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,IAAN,EAAe;AACzBC,UAAQC,GAAR,CAAY,WAAZ;AACAF;AACAC,UAAQC,GAAR,CAAY,SAAZ;AACD,CAJD;;AAMA,IAAMC,MAAM,SAANA,GAAM,CAACJ,GAAD,EAAMC,IAAN,EAAe;AACzBC,UAAQC,GAAR,CAAY,WAAZ;AACAF;AACAC,UAAQC,GAAR,CAAY,SAAZ;AACD,CAJD;;AAMA,IAAME,QAAQ,SAARA,KAAQ,CAACL,GAAD,EAAMC,IAAN,EAAe;AAC3BC,UAAQC,GAAR,CAAY,aAAZ;AACAF;AACAC,UAAQC,GAAR,CAAY,WAAZ;AACD,CAJD;;AAMAL,IAAIQ,GAAJ,CAAQP,GAAR;AACAD,IAAIQ,GAAJ,CAAQF,GAAR;AACAN,IAAIQ,GAAJ,CAAQD,KAAR;;AAEAP,IAAIS,MAAJ,CAAW,IAAX;;AAEA;AACA;AACA","file":"09.js","sourcesContent":["/**\r\n ?c 中间件栈    多个中间件会形成一个栈结构，以先进后出的顺序执行\r\n *c 1. 最外层的中间件首先执行\r\n *c 2. 调用next函数，把执行权交给下一个中间件\r\n *c 3. 最内层的中间件最后执行\r\n *c 4. 执行结束后，把执行权交回上一层中间件\r\n *c 5. 最外层的中间件收回执行权后，执行next函数后面的代码\r\n */\r\n\r\nconst Koa = require('koa')\r\nconst app = new Koa()\r\n\r\nconst one = (ctx, next) => {\r\n  console.log('one start')\r\n  next()\r\n  console.log('one end')\r\n}\r\n\r\nconst two = (ctx, next) => {\r\n  console.log('two start')\r\n  next()\r\n  console.log('two end')\r\n}\r\n\r\nconst three = (ctx, next) => {\r\n  console.log('three start')\r\n  next()\r\n  console.log('three end')\r\n}\r\n\r\napp.use(one)\r\napp.use(two)\r\napp.use(three)\r\n\r\napp.listen(3000)\r\n\r\n//todo 如果将 two 中的next()注释掉\r\n//?  其结果， one start two start two end one start \r\n//?  不会进入到three中间件里，提前结束"]}