{"version":3,"sources":["../../src/koa/16.js"],"names":["Koa","require","app","handler","ctx","next","response","status","statusCode","body","message","error","throw","use","listen"],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAMA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,MAAM,IAAIF,GAAJ,EAAZ;;AAEA,IAAMG;AAAA,sFAAU,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAENA,MAFM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIZD,gBAAIE,QAAJ,CAAaC,MAAb,GAAsB,YAAIC,UAAJ,IAAkB,YAAID,MAAtB,IAAgC,GAAtD;AACAH,gBAAIE,QAAJ,CAAaG,IAAb,GAAoB;AAClBC,uBAAS,YAAIA;AADK,aAApB;;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAWA;AACA;AACA;AACA;;AAEA,IAAMC,QAAQ,SAARA,KAAQ,MAAO;AACnBP,MAAIQ,KAAJ,CAAU,GAAV;AACD,CAFD;;AAIA;AACAV,IAAIW,GAAJ,CAAQF,KAAR;;AAEAT,IAAIY,MAAJ,CAAW,IAAX","file":"16.js","sourcesContent":["/**\r\n !c 处理错误的中间件\r\n ?c 为了方便处理错误，最好使用try...catch将其捕获。但是，为每个中间件都写try...catch太麻烦\r\n ?c 我们可以让最外层的中间件，负责所有中间件的错误处理，下例：\r\n */\r\n\r\nconst Koa = require('koa')\r\nconst app = new Koa()\r\n\r\nconst handler = async (ctx, next) => {\r\n  try {\r\n    await next()\r\n  } catch (err) {\r\n    ctx.response.status = err.statusCode || err.status || 500\r\n    ctx.response.body = {\r\n      message: err.message\r\n    }\r\n  } \r\n}\r\n\r\n// const main = (ctx, next) => {\r\n//   ctx.response.body = 'Hello World'\r\n//   next()\r\n// }\r\n\r\nconst error = ctx => {\r\n  ctx.throw(500);\r\n}\r\n\r\n// app.use(main)\r\napp.use(error)\r\n\r\napp.listen(3000)"]}