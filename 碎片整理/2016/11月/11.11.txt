<a href="" value="id/25/p/2">2</a>
<a href="" value="id/25/p/3">3</a>
<a href="" value="id/25/p/4">4</a>
<a href="" value="id/25/p/5">5</a>

需求： 匹配出 25 和 p/后的数字 2

法一：

var a = 'id/25/p/39',
    b = a.split('/p/')[1];
console.log(b); // 39


法二：

var m ='id/25/p/1'.match(/id\/(\d+)\/p\/(\d+)/);

var yourValue = 'id/25/p/2';
var regex = /id\/(\d+)\/p\/(\d+)/;
regex.test(yourValue);
console.log('第一个括号捕获的内容：' + RegExp.$1);
console.log('第二个括号捕获的内容，你想要的部分：' + RegExp.$1);

当你使用正则匹配时，括号捕获的内容会存到分组里边，一般是按数字顺序排列，
在 js 中，捕获分组一般是这样得到值:
RegExp.$1
RegExp.$2
RegExp.$3
...
RegExp.$9

一般情况，能存9个
还有个特殊的 RegExp.$_
这是取刚才整个正则匹配到的内容
在这里，其实只需要最后那个括号，然后用 $1来取值即可

问： 第10个怎么取？ 
答： 第10个，就用 match 吧，但是用这么多分组的正则，不是看起来很不舒服吗，一般不会有这样的需求的

其实正则还有个更好用的分组方式――命名分组
格式：
(?<groupname>此部分的正则)
或
(?'groupname'此部分的正则)

如，刚才的正则
id\/(\d+)\/p\/(\d+)/;
可以改成：
id\/(?<firstNum>\d+)\/p\/(?<secondNum>\d+)/;
那么，用这个正则匹配后，分组就不存到 数字分组里，不是通过 1~9 来取，
而是可以通过 firstNum 或 secondNum 这样的名字来读取

不过，很可惜的是，JS中不支持这样的用法。
原因是，由于历史的原因，正则引擎有多个，命名分组是稍微高级点的用法，有的引擎支持，有的不支持，
而JS用的正则引擎是功能最少的一个

回答人 成都-巫师